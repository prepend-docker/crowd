image: atlassian/docker-release-maker:latest

pipelines:
  custom:
    new-releases:
      - step:
          name: Crowd Ubuntu
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - export BASE_VERSION='3'
            - export CONCURRENT_BUILDS='4'
            - export DEFAULT_RELEASE='true'
            - export DOCKER_REPO='dchevell/crowd'
            - export DOCKERFILE_VERSION_ARG='CROWD_VERSION'
            - export MAC_PRODUCT_KEY='crowd'
            - export TAG_SUFFIXES='ubuntu'
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - python /usr/src/app/run.py --create
      - step:
          name: Crowd Alpine
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - export BASE_VERSION='3'
            - export CONCURRENT_BUILDS='4'
            - export DEFAULT_RELEASE='false'
            - export DOCKER_REPO='dchevell/crowd'
            - export DOCKERFILE='Dockerfile-alpine'
            - export DOCKERFILE_VERSION_ARG='CROWD_VERSION'
            - export MAC_PRODUCT_KEY='crowd'
            - export TAG_SUFFIXES='alpine'
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - python /usr/src/app/run.py --create
    ubuntu-custom-release:
      - variables:
          - name: CROWD_VERSION
          - name: DOCKER_TAG
      - step:
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - >
              docker build -t dchevell/crowd:${DOCKER_TAG}
              --build-arg CROWD_VERSION=${CROWD_VERSION} .
            - docker push dchevell/crowd:${DOCKER_TAG}
    alpine-custom-release:
      - variables:
          - name: CROWD_VERSION
          - name: DOCKER_TAG
      - step:
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - >
              docker build -t dchevell/crowd:${DOCKER_TAG}
              -f Dockerfile-alpine
              --build-arg CROWD_VERSION=${CROWD_VERSION} .
            - docker push dchevell/crowd:${DOCKER_TAG}
  branches:
    master:
      - step:
          name: Crowd Ubuntu
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - export BASE_VERSION='3'
            - export CONCURRENT_BUILDS='4'
            - export DEFAULT_RELEASE='true'
            - export DOCKER_REPO='dchevell/crowd'
            - export DOCKERFILE_VERSION_ARG='CROWD_VERSION'
            - export MAC_PRODUCT_KEY='crowd'
            - export TAG_SUFFIXES='ubuntu'
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - python /usr/src/app/run.py --update
      - step:
          name: Crowd Alpine
          services:
            - docker
          script:
            - git submodule update --init --recursive
            - export BASE_VERSION='3'
            - export CONCURRENT_BUILDS='4'
            - export DEFAULT_RELEASE='false'
            - export DOCKER_REPO='dchevell/crowd'
            - export DOCKERFILE='Dockerfile-alpine'
            - export DOCKERFILE_VERSION_ARG='CROWD_VERSION'
            - export MAC_PRODUCT_KEY='crowd'
            - export TAG_SUFFIXES='alpine'
            - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            - python /usr/src/app/run.py --update
      - step:
          name: Update README
          image: python:3.7-alpine3.9
          script:
            - apk add --no-cache git
            - git submodule update --init --recursive
            - export DOCKER_REPO='dchevell/crowd'
            - pip install -q requests
            - python shared-components/image/push-readme.py
  pull-requests:
    '**':
      - step:
          image: python:3.7-alpine3.9
          services:
            - docker
          script:
            - apk add --no-cache git
            - git submodule update --init --recursive
            - pip install -q -r shared-components/tests/requirements.txt
            - export PYTHONPATH=./shared-components/tests:$PYTHONPATH
            - export MAC_PRODUCT_KEY='crowd'
            - export DOCKERFILE='Dockerfile'
            - export DOCKERFILE_VERSION_ARG='CROWD_VERSION'
            - py.test tests/
            - py.test shared-components/tests/
            - export DOCKERFILE='Dockerfile-alpine'
            - py.test tests/
            - py.test shared-components/tests/
